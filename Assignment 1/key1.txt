Austin Zhang
604736503
CS35L Lab 6 - Justin Wood

Exercise 1.1: Moving around in Emacs
1. [open exer1.html in emacs]
2. C-s H T M L Enter
3. C-s s c a v e n g e r M-b
4. C-s s e l f M-b
5. C-s a r r o w M-b
6. C-e
7. C-a
8. Did not use arrow keys; used commands available in emacs
9. Did not use arrow keys.
10 C-z

Exercise 1.2: Deleting text in Emacs
1. [open exer2.html in emacs]
2. C-s < ! - C-a C-k
3. C-s D E C-a C-k
4. C-s < ! C-a C-k C-k C-k C-p C-k
5. 
C-s < ! C-a C-k
C-s < ! C-a C-k Down C-k Down C-k Down C-k
C-s < ! C-a C-k

Exercise 1.3: Inserting text in Emacs
1. [open exer3.html in emacs]
2. M-% A s s i g n m e n t SP 1 Enter A s s i g n m e n t SP 2 1 Enter y y n
3. M-% U T F - 8 Enter U S - A S C I I y
4. M-x query-replace-regexp [ ^ [ : a s c i i : ] ] Enter Enter [y until done]
5. C-s < / o l > C-e Enter
6. C-x C-c y

Exercise 1.4: Other editing tasks in Emacs
1. cat exer2.html exer2.diff > exer4.html
2. [open exer4.html in emacs]
3 & 4. 
M-> C-r - < C-r C-r C-SP C-e Down Down Down M-w M-g M-g 385 C-y C-k C-a Right backspaceUp Right 
	Backspace Up Right Backspace
M-> C-r - < ! - C-r C-SP C-e Down Down M-w M-g M-g 338 C-y C-a 
   	Right Backspace Up Right Backspace Up Right Backspace
M-> C-r - < ! - C-r C-r C-SP C-e M-w M-g M-g 125 C-y C-a Right Backspace
M-> C-r - < ! - C-r C-r C-r C-SP C-e M-w M-g M-g 18 C-y C-a Right Backspace
5. M-> C-r e n d C-a Down C-SP M-> Backspace
6. C-x u
7. M-> C-r e n d C-a Down < ! - - SP M-> - - >
8. M-% <ol> Enter <oL> Enter y y y y y y y 
9. [ran the specified command]

Exercise 1.5: Doing commands in Emacs
1. M-! m k d i r SP ~ / j u n k
2. C-x C-f j u n k / h e l l o . c Enter [type the code]
3. M-x c o m p i l e Backspace Backspace Backspace Backspace Backspace 
   Backspace Backspace Backspace g c c SP h e l l o . c Enter y (to save)
4. C-x b h e l l o - o u t Enter
   C-u M-! . / a . o u t Enter
5. 
#include <stdio.h>
int
main (void)
{
  char n = '\n';
  char b = '\\';
  char q = '"';
  char const *p = "#include <stdio.h>%cint%cmain (void)%c{%c  char n = '%cn';%c  char b = '%c%c';%c  char q = '%c';%c  char const *p = %c%s%c;%c  printf (p, n, n, n, n, b, n, b, b, n, q, n, q, p, q, n, n, n, n);%c  return 0;%c}%c";
  printf (p, n, n, n, n, b, n, b, b, n, q, n, q, p, q, n, n, n, n);
  return 0;
}
C-SP M-> M-w C-x C-f k e y 1 . t x t  M-> M-x c l i p b o a r d - y a n k Enter


Exercise 1.6: Running Elisp code
1. C-x b Enter
2. 1788718440919729613
   This number was found with ( r a n d o m SP " 6 0 4 - 7 3 6 - 5 0 3 " ) C-j
3. ( s e t q SP x ( r a n d o m ) ) Enter C-j
   ( s e t q SP y ( r a n d o m ) ) Enter C-j
   ( * SP x SP y ) Enter C-j 
4. The product evaluates to 903195273356921274, but evaluating different expressions would sometimes 
lead to an incorrect answer.
5. When you do M-: eval expression that still matches the other answer.
6. No, it's not really random due to memory constraints. Also, computers cannot generate true random 
numbers; these "random" numbers come from formulas or inputs
7. 1 - 44.7/n where n is the maximum integer signed long max. The probability of getting 0 as the 
first number is 1/n, with the probability of getting 1 being the same. Considering the numbers beyond, 
for n there is a 1/n chance, so the total probability of overflow becomes 1/n * (1 + ... + 1/n).
This becomes 44.7/n as the probability of NOT overflowing, making 1 - 44.7/n the probability of 
overflowing. 






